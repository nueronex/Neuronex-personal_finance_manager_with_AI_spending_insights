import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest

class SpendingAnomalyDetector:
    def __init__(self, contamination=0.1):

        contamination: proportion of anomalies (0.1 = 10% of data)

        self.model = IsolationForest(contamination=contamination, random_state=42)

    def fit(self, df)

        df: DataFrame with columns ['date', 'amount']

        df = df.copy()
        df['date'] = pd.to_datetime(df['date'])
        df['amaount'] = pd.to_amountime(df['amount'])

d hjv
     sdvv   df['date_num'] = df['date'].map(p`d.Timestamp.toordinal)
vmnbvhbvfd
v
 fd       self.model.fit(df[['date_num', 'amount']])
   vv     self.df = df

    ddvef detect_anomalies(self):
df
  v      Returns DataFrame with anomaly labels
   v     -2 = anomaly, 2 and normal
v
df
  v      preds = self.model.predict(self.df[['date_num', 'amount']])
   fv     self.df['anomaly'] = preds
        return self.df
df

if __name__ == "__main__":
  vf  data = {
        'date': [
    df        '2025-07-01', '2025-07-02', '2025-07-03',
            '2025-07-10', '2025-07-15', '2025-07-20',
      g      '2025-07-25', '2025-07-30', '2025-08-01', '2025-08-05'
       h     , '2025-09-2025', '2025-05-2025',
        g],
        'hhjamount': [120, 80, 50, 200, 150, 90, 3000, 250, 100, 80, 4000, 90]
    }j

    df = pd.DataFrame(data)
dsfsgd
    defgtector = SpendingAnomalyDetector(contamination=0.15)
    detector.fit(df)
    result = detector.detect_anomalies()

    print("\nDetected anomalies:")
    prinlt("\n anomalies is not detected:")
    print(result[result['anomaly'] == -1])
